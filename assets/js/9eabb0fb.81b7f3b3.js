"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[618],{6279:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"guide/basic-syntax","title":"Basic Syntax","description":"This is a quick overview on the structure of NumFu programs.","source":"@site/../docs/guide/basic-syntax.md","sourceDirName":"guide","slug":"/guide/basic-syntax","permalink":"/docs/guide/basic-syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/guide/basic-syntax.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Getting Started","permalink":"/docs/"},"next":{"title":"Numbers and Arithmetic","permalink":"/docs/guide/arithmetic"}}');var r=i(4848),l=i(8453);const c={},d="Basic Syntax",t={},o=[{value:"Basic Program",id:"basic-program",level:2},{value:"Expression Termination",id:"expression-termination",level:2},{value:"Comments",id:"comments",level:2},{value:"Single-line Comments",id:"single-line-comments",level:3},{value:"Multi-line Comments",id:"multi-line-comments",level:3},{value:"Operator Precedence",id:"operator-precedence",level:2},{value:"Associativity Rules",id:"associativity-rules",level:2},{value:"Left-associative Operators",id:"left-associative-operators",level:3},{value:"Right-associative Operators",id:"right-associative-operators",level:3},{value:"Reserved Words",id:"reserved-words",level:2},{value:"Identifier Rules",id:"identifier-rules",level:2},{value:"Valid Identifiers",id:"valid-identifiers",level:3},{value:"Invalid Identifiers",id:"invalid-identifiers",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"basic-syntax",children:"Basic Syntax"})}),"\n",(0,r.jsx)(n.p,{children:"This is a quick overview on the structure of NumFu programs."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"basic-program",children:"Basic Program"}),"\n",(0,r.jsx)(n.p,{children:"A NumFu program consists of expressions and optional assertions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'42                      // Simple expression\nprintln("Hello!")       // Function call\nlet x = 5 in x * 2      // Let binding\nsqrt(25) ---\x3e $ == 5    // Assertion\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"42\nHello!\n10\n5\n"})}),"\n",(0,r.jsx)(n.p,{children:"Every expression is evaluated and the result is written to stdout. For information on the separation of expressions, see below."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"expression-termination",children:"Expression Termination"}),"\n",(0,r.jsxs)(n.p,{children:["Semicolons (",(0,r.jsx)(n.code,{children:";"}),") mark the definitive end of an expression. They ",(0,r.jsx)(n.em,{children:"can"})," be omitted but are highly advised in more complex programs since they prevent unexpected bugs like this, because NumFu generally ignores whitespace and newlines:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"42          //Number\n[1,2,3,4]   // List\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[at REPL:2:1]\n[2]   [1]   // List\n      ^^^\nTypeError: 'Number' object is not subscriptable\n"})}),"\n",(0,r.jsx)(n.p,{children:"NumFu identified the list as index for the previous expression."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,r.jsx)(n.h3,{id:"single-line-comments",children:"Single-line Comments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"// This is a single-line comment\n1+1       // End-of-line comment\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multi-line-comments",children:"Multi-line Comments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"/*\n   This is a multi-line comment\n   that can span several lines\n   and is useful for longer explanations\n*/\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"operator-precedence",children:"Operator Precedence"}),"\n",(0,r.jsx)(n.p,{children:"From highest to lowest precedence:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parentheses"}),": ",(0,r.jsx)(n.code,{children:"()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function calls"}),": ",(0,r.jsx)(n.code,{children:"f(x)"}),", Indexing: ",(0,r.jsx)(n.code,{children:"a[i]"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exponentiation"}),": ",(0,r.jsx)(n.code,{children:"^"})," (right-associative)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unary operators"}),": ",(0,r.jsx)(n.code,{children:"+"}),", ",(0,r.jsx)(n.code,{children:"-"}),", ",(0,r.jsx)(n.code,{children:"!"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiplication, Division, Modulo"}),": ",(0,r.jsx)(n.code,{children:"*"}),", ",(0,r.jsx)(n.code,{children:"/"}),", ",(0,r.jsx)(n.code,{children:"%"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Addition, Subtraction"}),": ",(0,r.jsx)(n.code,{children:"+"}),", ",(0,r.jsx)(n.code,{children:"-"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comparison"}),": ",(0,r.jsx)(n.code,{children:"<"}),", ",(0,r.jsx)(n.code,{children:">"}),", ",(0,r.jsx)(n.code,{children:"<="}),", ",(0,r.jsx)(n.code,{children:">="})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Equality"}),": ",(0,r.jsx)(n.code,{children:"=="}),", ",(0,r.jsx)(n.code,{children:"!="})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logical AND"}),": ",(0,r.jsx)(n.code,{children:"&&"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logical OR"}),": ",(0,r.jsx)(n.code,{children:"||"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composition"}),": ",(0,r.jsx)(n.code,{children:">>"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pipe"}),": ",(0,r.jsx)(n.code,{children:"|>"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"2 + 3 * 4            // 14\n2^3^2                // 512 (2^(3^2), right-associative)\n!true && false       // false ((!true) && false)\n1 < 2 == true        // true ((1 < 2) == true)\nx |> f >> g          // x |> (f >> g) (composition before pipe)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"associativity-rules",children:"Associativity Rules"}),"\n",(0,r.jsx)(n.h3,{id:"left-associative-operators",children:"Left-associative Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"10 - 5 - 2           // 3 ((10 - 5) - 2)\n12 / 4 / 3           // 1 ((12 / 4) / 3)\n1 < 2 < 3            // true ((1 < 2) && (2 < 3))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"right-associative-operators",children:"Right-associative Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"2^3^2                // 512 (2^(3^2))\nf >> g >> h          // f >> (g >> h)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"reserved-words",children:"Reserved Words"}),"\n",(0,r.jsx)(n.p,{children:"The keywords and special symbols listed below cannot be used as variable names or function parameters. The parser will throw an error if you try to use them."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"let"}),", ",(0,r.jsx)(n.code,{children:"in"}),", ",(0,r.jsx)(n.code,{children:"if"}),", ",(0,r.jsx)(n.code,{children:"then"}),", ",(0,r.jsx)(n.code,{children:"else"}),", ",(0,r.jsx)(n.code,{children:"del"}),",",(0,r.jsx)(n.code,{children:"import"}),", ",(0,r.jsx)(n.code,{children:"export"}),", ",(0,r.jsx)(n.code,{children:"from"}),", ",(0,r.jsx)(n.code,{children:"true"}),", ",(0,r.jsx)(n.code,{children:"false"}),", ",(0,r.jsx)(n.code,{children:"$"}),", ",(0,r.jsx)(n.code,{children:"_"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"identifier-rules",children:"Identifier Rules"}),"\n",(0,r.jsx)(n.h3,{id:"valid-identifiers",children:"Valid Identifiers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"// Letters, numbers, underscores\nmyVariable\n_private\ncamelCase\nsnake_case\nvar123\n_123\n"})}),"\n",(0,r.jsx)(n.h3,{id:"invalid-identifiers",children:"Invalid Identifiers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"// Cannot start with numbers\n123var\n\n// No unicode letters\n\u03b1\u03b2\u03b3\n\u53d8\u91cf\n\n// Cannot contain special characters\nmy-var\nmy@var\nmy var\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>d});var s=i(6540);const r={},l=s.createContext(r);function c(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);