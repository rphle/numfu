"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[804],{5200:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"readme","title":"Getting Started with NumFu","description":"NumFu is a pure, interpreted, functional programming language designed for readable and expressive code, extensibility, and ease of learning for beginners.","source":"@site/../docs/readme.md","sourceDirName":".","slug":"/","permalink":"/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/readme.md","tags":[],"version":"current","frontMatter":{"slug":"/"},"sidebar":"docsSidebar","next":{"title":"Basic Syntax","permalink":"/docs/guide/basic-syntax"}}');var t=i(4848),s=i(8453);const a={slug:"/"},l="Getting Started with NumFu",o={},c=[{value:"Quick Example",id:"quick-example",level:2},{value:"Installation",id:"installation",level:2},{value:"From PyPI",id:"from-pypi",level:3},{value:"From Source",id:"from-source",level:3},{value:"Your First NumFu Program",id:"your-first-numfu-program",level:2},{value:"Interactive Development",id:"interactive-development",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"getting-started-with-numfu",children:"Getting Started with NumFu"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NumFu"})," is a pure, interpreted, functional programming language designed for readable and expressive code, extensibility, and ease of learning for beginners."]}),"\n",(0,t.jsx)(n.p,{children:"NumFu's simple syntax and semantics make it well-suited for educational applications, such as courses in functional programming and general programming introductions. At the same time, as its name suggests, NumFu is also ideal for exploring mathematical ideas and sketching algorithms, thanks to its native support for arbitrary-precision arithmetic."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expressive syntax"}),": Infix operators ",(0,t.jsx)(n.code,{children:"a + b"}),", spread/rest operator ",(0,t.jsx)(n.code,{children:"..."})," and easy testing ",(0,t.jsx)(n.code,{children:"---\x3e $ == 42"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Arbitrary precision arithmetic"})," for reliable mathematical computing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"First-class functions"})," with automatic partial application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tail call optimization"})," for efficient recursive algorithms without stack overflow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interactive development"})," with a friendly REPL and helpful errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Large standard library"})," provided by NumFu's python bindings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Minimal complexity"})," by only having four types: ",(0,t.jsx)(n.code,{children:"Number"}),", ",(0,t.jsx)(n.code,{children:"Boolean"}),", ",(0,t.jsx)(n.code,{children:"List"})," and ",(0,t.jsx)(n.code,{children:"String"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"quick-example",children:"Quick Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a taste of what NumFu looks like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-numfu",children:"// Mathematical computing\nlet goldenRatio = {depth ->\n  let cf = {d ->\n    if d <= 0 then 1\n    else 1 + 1 / cf(d - 1)\n  } in cf(depth)\n} in goldenRatio(10)\n// 1.61797752808989\n\n// Function composition & piping\nlet add1 = {x -> x + 1},\n    double = {x -> x * 2} in\nlet composed = add1 >> double in\n  5 |> composed; // 12\n\n// Native partial application\n{x, y, z -> x + y + z}(_, 2)\n// {x, z -> x+2+z}\n\n// Built-in testing with assertions\nlet square = {x -> x * x} in\n  square(5) ---\x3e $ == 25; // \u2713 passes\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h3,{id:"from-pypi",children:"From PyPI"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# make sure you have Python >= 3.10 installed\npip install numfu-lang\n"})}),"\n",(0,t.jsx)(n.h3,{id:"from-source",children:"From Source"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/rphle/numfu\ncd numfu\nmake install\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"your-first-numfu-program",children:"Your First NumFu Program"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file called ",(0,t.jsx)(n.code,{children:"hello.nfu"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-numfu",children:'// hello.nfu\nimport println from "io"\nimport format from "std"\n\nprintln("Hello, NumFu!")\n\n// Let\'s do some math\nlet fibonacci = {n ->\n  if n <= 1 then n\n  else fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nprintln(format("The 10th Fibonacci number is: {}", fibonacci(10)))\n\n// Test our function\nfibonacci(5) ---\x3e $ == 5\n'})}),"\n",(0,t.jsx)(n.p,{children:"Run it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"numfu hello.nfu\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"interactive-development",children:"Interactive Development"}),"\n",(0,t.jsx)(n.p,{children:"Start the REPL for interactive exploration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"numfu repl\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"NumFu REPL. Type 'exit' or press Ctrl+D to exit.\n>>> 2 + 3 * 4\n14\n>>> let square = {x -> x * x} in square(7)\n49\n>>> import max from \"math\"\n>>> [1, 2, 3, 4, 5, 6, 7] |> filter(_, {x -> x%2 == 0}) |> max\n6\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check out the language guide: Dive deeper into NumFu with the ",(0,t.jsx)(n.a,{href:"/docs/guide/basic-syntax",children:"comprehensive documentation"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Contribute: Help improve NumFu by contributing ",(0,t.jsx)(n.a,{href:"https://github.com/rphle/numfu",children:"code, documentation"}),", or ",(0,t.jsx)(n.a,{href:"https://github.com/rphle/numfu/issues/new",children:"bug reports"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Build Projects: Start creating your own projects and share them!"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);