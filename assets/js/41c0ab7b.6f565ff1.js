"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[741],{1925:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guide/strings","title":"Strings and Text","description":"NumFu treats text as first-class data with powerful string operations. Let\'s explore how to work with strings in NumFu.","source":"@site/../docs/guide/strings.md","sourceDirName":"guide","slug":"/guide/strings","permalink":"/numfu/docs/guide/strings","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/guide/strings.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Lists","permalink":"/numfu/docs/guide/lists"},"next":{"title":"Special Operators","permalink":"/numfu/docs/guide/operators"}}');var r=s(4848),t=s(8453);const l={},a="Strings and Text",o={},c=[{value:"String Literals",id:"string-literals",level:2},{value:"Basic Strings",id:"basic-strings",level:3},{value:"Escape Sequences",id:"escape-sequences",level:3},{value:"String Operations",id:"string-operations",level:2},{value:"Concatenation",id:"concatenation",level:3},{value:"Repetition",id:"repetition",level:3},{value:"String Access and Properties",id:"string-access-and-properties",level:2},{value:"Character Indexing",id:"character-indexing",level:3},{value:"Negative Indexing",id:"negative-indexing",level:3},{value:"String Properties &amp; Functions",id:"string-properties--functions",level:2},{value:"String Length",id:"string-length",level:3},{value:"Case Conversion",id:"case-conversion",level:3},{value:"String Testing",id:"string-testing",level:3},{value:"Count Substrings",id:"count-substrings",level:3},{value:"String Slicing",id:"string-slicing",level:3},{value:"Splitting Strings",id:"splitting-strings",level:3},{value:"Joining Lists",id:"joining-lists",level:3},{value:"Template Strings &amp; Formatting",id:"template-strings--formatting",level:2},{value:"Escape placeholders",id:"escape-placeholders",level:3},{value:"Examples",id:"examples",level:2},{value:"Bordered Title",id:"bordered-title",level:3},{value:"Building Messages",id:"building-messages",level:3},{value:"String Validation",id:"string-validation",level:3},{value:"String Processing",id:"string-processing",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"strings-and-text",children:"Strings and Text"})}),"\n",(0,r.jsx)(n.p,{children:"NumFu treats text as first-class data with powerful string operations. Let's explore how to work with strings in NumFu."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"string-literals",children:"String Literals"}),"\n",(0,r.jsx)(n.h3,{id:"basic-strings",children:"Basic Strings"}),"\n",(0,r.jsx)(n.p,{children:"Strings are enclosed in double quotes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'"Hello, NumFu!"\n"Programming is fun"\n""                        // Empty string\n'})}),"\n",(0,r.jsx)(n.h3,{id:"escape-sequences",children:"Escape Sequences"}),"\n",(0,r.jsx)(n.p,{children:"Use backslash for special characters:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'"Line 1\\nLine 2"          // Newline\n"Tab\\tSeparated"          // Tab character\n"Quote: \\"Hello\\""        // Escaped quotes\n"Backslash: \\\\"           // Escaped backslash\n"Unicode: \\u03B1"         // Unicode (\u03b1)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"string-operations",children:"String Operations"}),"\n",(0,r.jsx)(n.p,{children:"Strings are very similar to lists and share many operations with them. You can think of them as lists of characters."}),"\n",(0,r.jsx)(n.h3,{id:"concatenation",children:"Concatenation"}),"\n",(0,r.jsxs)(n.p,{children:["Join strings with the ",(0,r.jsx)(n.code,{children:"+"})," operator:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'"Hello" + " " + "World"     // "Hello World"\n"NumFu" + "!"               // "NumFu!"\n\n// Multi-line concatenation\n"This is a very long string " +\n"that spans multiple lines"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"repetition",children:"Repetition"}),"\n",(0,r.jsxs)(n.p,{children:["Repeat strings with the ",(0,r.jsx)(n.code,{children:"*"})," operator:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'3 * "Ho"             // "HoHoHo"\n"=" * 20             // "===================="\n2* "NumFu "          // "NumFu NumFu "\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"string-access-and-properties",children:"String Access and Properties"}),"\n",(0,r.jsx)(n.h3,{id:"character-indexing",children:"Character Indexing"}),"\n",(0,r.jsxs)(n.p,{children:["Access individual characters with square brackets (",(0,r.jsx)(n.a,{href:"http://localhost:3000/docs/guide/lists#accessing-list-elements",children:"just like elements in a list"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'"Hello"[0]           // "H" (first character)\n"Hello"[4]           // "o" (last character)\n"NumFu"[2]           // "m"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"negative-indexing",children:"Negative Indexing"}),"\n",(0,r.jsx)(n.p,{children:"Count from the end with negative indices:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'"Hello"[-1]          // "o" (last character)\n"Hello"[-2]          // "l" (second to last)\n"Programming"[-1]    // "g"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"string-properties--functions",children:"String Properties & Functions"}),"\n",(0,r.jsxs)(n.p,{children:["All of the functions shown below must be imported from the ",(0,r.jsx)(n.code,{children:"std"})," standard library module. When running the examples, remember to import it at the top of your file (or in the REPL):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import * from "std"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-length",children:"String Length"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'length("Hello")          // 5\nlength("")               // 0\nlength("NumFu rocks!")   // 12\n'})}),"\n",(0,r.jsx)(n.h3,{id:"case-conversion",children:"Case Conversion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'toLowerCase("HELLO")     // "hello"\ntoUpperCase("world")     // "WORLD"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-testing",children:"String Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'contains("hello", "lo")    // true (substring exists)\ncontains("hello", "xyz")   // false\n'})}),"\n",(0,r.jsx)(n.h3,{id:"count-substrings",children:"Count Substrings"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'count("The math is not mathing.", "math")\n// 2 (two occurences of "math")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-slicing",children:"String Slicing"}),"\n",(0,r.jsxs)(n.p,{children:["Extract substrings using ",(0,r.jsx)(n.code,{children:"slice(string, start, end)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'slice("Hello World", 0, 4)    // "Hello"\nslice("Programming", 3, 6)    // "gram"\nslice("NumFu", 1, -1)         // "umF" (from index 1 to end-1)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"splitting-strings",children:"Splitting Strings"}),"\n",(0,r.jsxs)(n.p,{children:["Split a string into a list of strings by the specified separator: ",(0,r.jsx)(n.code,{children:"split(string, separator)"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let text = "NumFu Programming Language" in\nlet words = split(text, " ") in\n  words // ["NumFu", "Programming", "Language"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"joining-lists",children:"Joining Lists"}),"\n",(0,r.jsxs)(n.p,{children:["Join a list of strings with a separator: ",(0,r.jsx)(n.code,{children:"join(list, separator)"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let words = ["NumFu", "Programming", "Language"] in\n  join(words, "-")     // "NumFu-Programming-Language"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"template-strings--formatting",children:"Template Strings & Formatting"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"format()"})," function from ",(0,r.jsx)(n.code,{children:"std"})," allows you to create formatted strings by inserting values into placeholders. It takes a string and the same number of additional arguments as there are placeholders (",(0,r.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'import format from "std"\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'format("Welcome to {}, {}!", "NumFu", "programmer")\n// "Welcome to NumFu, programmer!"\n\nformat("Result: {} + {} = {}", 2, 3, 5)\n// "Result: 2 + 3 = 5"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you do not supply the correct number of arguments, an ",(0,r.jsx)(n.code,{children:"IndexError"})," will be raised."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'format("{} likes {}", "John")\n// IndexError: Incorrect number of placeholders\n'})}),"\n",(0,r.jsx)(n.h3,{id:"escape-placeholders",children:"Escape placeholders"}),"\n",(0,r.jsx)(n.p,{children:"To escape placeholders and treat them as literal characters, enclose them in curly braces"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'format("Using placeholders {{}}, you can format {}", "strings")\n// "Using placeholders {}, you can format strings"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["When running the examples below, remember to import the ",(0,r.jsx)(n.code,{children:"std"})," standard library module at the top of your file (or in the REPL) because it provides essential functions for working with strings."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import * from "std"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bordered-title",children:"Bordered Title"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let border = "=" * 50 in\nlet title = "NumFu Tutorial" in\nlet padding = ((50 - length(title)) / 2) in\n  border + "\\n" +\n  " " * padding + title + "\\n" +\n  border\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"==================================================\n                  NumFu Tutorial\n==================================================\n"})}),"\n",(0,r.jsx)(n.h3,{id:"building-messages",children:"Building Messages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let name = "Alice" in\nlet age = 30 in\n  "Hello, " + name + "! You are " + String(age) + " years old."\n// Hello, Alice! You are 30 years old.\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-validation",children:"String Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let isValidEmail = {email ->\n  if count(email, "@") != 1 then false else\n    let splitted = split(email, "@") in\n      count(splitted[1], ".") > 0\n      && splitted[1][-1] != "."\n      && splitted[0][0] != "."\n}\n\nisValidEmail("user@example.com")        // true\nisValidEmail("userexample.com")         // false\nisValidEmail("user@email@example.com")  // false\nisValidEmail("user@example.com.")       // false\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-processing",children:"String Processing"}),"\n",(0,r.jsx)(n.p,{children:"Take a list of boolean options to determine whether to trim, lowercase, and replace spaces with underscores in the input text."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'// Text processor factory\nlet makeTextProcessor = {options ->\n  let shouldTrim = options[0],\n      shouldLower = options[1],\n      shouldReplace = options[2] in\n    {text ->\n      let step1 = if shouldTrim then trim(text) else text in\n      let step2 = if shouldLower then toLowerCase(step1) else step1 in\n      let step3 = if shouldReplace then replace(step2, " ", "_") else step2 in\n        step3\n    }\n}\n\nlet processor = makeTextProcessor([true, true, true]) in\n  processor("  Hello World  ")    // "hello_world"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);