"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[650],{2973:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"guide/variables","title":"Variables and Let Expressions","description":"In NumFu, variables can be created in two ways:","source":"@site/../docs/guide/variables.md","sourceDirName":"guide","slug":"/guide/variables","permalink":"/docs/guide/variables","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/guide/variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Booleans and Logic","permalink":"/docs/guide/booleans"},"next":{"title":"Functions","permalink":"/docs/guide/functions"}}');var a=i(4848),s=i(8453);const r={},t="Variables and Let Expressions",d={},c=[{value:"Let Bindings",id:"let-bindings",level:2},{value:"Using Variables in Calculations",id:"using-variables-in-calculations",level:3},{value:"Let Expressions Return Values",id:"let-expressions-return-values",level:3},{value:"Multiple Variable Bindings",id:"multiple-variable-bindings",level:2},{value:"Comma-Separated Bindings",id:"comma-separated-bindings",level:3},{value:"Mutual Reference",id:"mutual-reference",level:3},{value:"Variable Scoping",id:"variable-scoping",level:2},{value:"Lexical Scoping",id:"lexical-scoping",level:3},{value:"Nested Scoping",id:"nested-scoping",level:3},{value:"Scope Boundaries",id:"scope-boundaries",level:3},{value:"Variable Shadowing",id:"variable-shadowing",level:2},{value:"Inner Variables Shadow Outer Ones",id:"inner-variables-shadow-outer-ones",level:3},{value:"Original Values Preserved",id:"original-values-preserved",level:3},{value:"Practical Shadowing",id:"practical-shadowing",level:3},{value:"Let Statements",id:"let-statements",level:2},{value:"Deleting Variables",id:"deleting-variables",level:2},{value:"Variable Naming",id:"variable-naming",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Variable Usage",id:"basic-variable-usage",level:3},{value:"Scoping",id:"scoping",level:3},{value:"Multiple Bindings",id:"multiple-bindings",level:3},{value:"Intermediate Calculations",id:"intermediate-calculations",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"variables-and-let-expressions",children:"Variables and Let Expressions"})}),"\n",(0,a.jsx)(n.p,{children:"In NumFu, variables can be created in two ways:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Using ",(0,a.jsx)(n.code,{children:"let"})," bindings with ",(0,a.jsx)(n.code,{children:"in"}),", which create local scopes for values"]}),"\n",(0,a.jsxs)(n.li,{children:["Using top-level ",(0,a.jsx)(n.code,{children:"let"})," statements, which define program-wide variables"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This provides both functional scoping and practical module-level state management."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"let-bindings",children:"Let Bindings"}),"\n",(0,a.jsxs)(n.p,{children:["Let bindings create local scopes and return values. The basic syntax is ",(0,a.jsx)(n.code,{children:"let name = value in expression"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'let x = 42 in x              // 42\nlet name = "NumFu" in name   // "NumFu"\nlet flag = true in flag      // true\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The variable ",(0,a.jsx)(n.code,{children:"x"})," is only available within the ",(0,a.jsx)(n.code,{children:"in"})," part of the expression."]}),"\n",(0,a.jsx)(n.h3,{id:"using-variables-in-calculations",children:"Using Variables in Calculations"}),"\n",(0,a.jsx)(n.p,{children:"Variables become powerful when used in calculations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let radius = 5 in pi * radius^2        // Circle area: ~78.54\n\nlet price = 100 in\nlet tax = 0.08 in\n  price * (1 + tax)                     // Price with tax: 108\n"})}),"\n",(0,a.jsx)(n.h3,{id:"let-expressions-return-values",children:"Let Expressions Return Values"}),"\n",(0,a.jsxs)(n.p,{children:["Remember that ",(0,a.jsx)(n.code,{children:"let"})," expressions return the value of the ",(0,a.jsx)(n.code,{children:"in"})," part:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let result = let x = 10\n    in x * 2\n  in result + 5  // 25\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"multiple-variable-bindings",children:"Multiple Variable Bindings"}),"\n",(0,a.jsx)(n.h3,{id:"comma-separated-bindings",children:"Comma-Separated Bindings"}),"\n",(0,a.jsxs)(n.p,{children:["You can define multiple variables in a single ",(0,a.jsx)(n.code,{children:"let"})," expression. All variables defined in the same ",(0,a.jsx)(n.code,{children:"let"})," are available throughout the ",(0,a.jsx)(n.code,{children:"in"})," body:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'let x = 3, y = 4 in x^2 + y^2             // 25\n\nlet first = "Hello", second = "World" in\n  first + " " + second                    // "Hello World"\n\nlet a = 1, b = 2, c = 3 in a + b + c      // 6\n'})}),"\n",(0,a.jsx)(n.h3,{id:"mutual-reference",children:"Mutual Reference"}),"\n",(0,a.jsxs)(n.p,{children:["Variables in the same ",(0,a.jsx)(n.code,{children:"let"})," ",(0,a.jsx)(n.em,{children:"cannot"})," reference each other:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let x = y + 1, y = 5 in x\n// NameError: 'y' is not defined in the current scope\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"variable-scoping",children:"Variable Scoping"}),"\n",(0,a.jsx)(n.h3,{id:"lexical-scoping",children:"Lexical Scoping"}),"\n",(0,a.jsx)(n.p,{children:"NumFu uses lexical (static) scoping - variables are accessible where they're defined:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let outer = 10 in\n  let inner = 20 in\n    outer + inner    // 30 - both variables accessible\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nested-scoping",children:"Nested Scoping"}),"\n",(0,a.jsx)(n.p,{children:"Inner scopes have access to outer scopes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let a = 1 in\n  let b = 2 in\n    let c = 3 in\n      a + b + c    // 6\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scope-boundaries",children:"Scope Boundaries"}),"\n",(0,a.jsx)(n.p,{children:"Variables are only accessible within their scope:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let x = 10 in x + 5    // 15\nx    // NameError: 'x' is not defined in the current scope\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"variable-shadowing",children:"Variable Shadowing"}),"\n",(0,a.jsx)(n.h3,{id:"inner-variables-shadow-outer-ones",children:"Inner Variables Shadow Outer Ones"}),"\n",(0,a.jsx)(n.p,{children:'When you define a variable with the same name in an inner scope, it "shadows" the outer one:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let x = 10 in\n  let x = 20 in\n    x    // 20 (inner x)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"original-values-preserved",children:"Original Values Preserved"}),"\n",(0,a.jsx)(n.p,{children:"The outer variable is unchanged by shadowing:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let x = 10 in\n  let result = let x = 20 in x in\n    [x, result]    // [10, 20]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"practical-shadowing",children:"Practical Shadowing"}),"\n",(0,a.jsx)(n.p,{children:"Shadowing is useful for transforming values step by step:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'import trim, toLowerCase, replace from "std"\n\nlet data = "  Hello World  " in\nlet data = trim(data) in                // Remove whitespace\nlet data = toLowerCase(data) in         // Convert to lowercase\nlet data = replace(data, " ", "_") in   // Replace spaces\n  data                                  // "hello_world"\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"let-statements",children:"Let Statements"}),"\n",(0,a.jsx)(n.p,{children:"Let statements define variables that are available throughout your program:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'import * from "io"\n\nlet PI = 3.14159\nlet greeting = "Welcome to NumFu!"\n\n// These are available in all expressions below\nprintln(greeting)\nprint("pi^2 = ")\nPI^2\n'})}),"\n",(0,a.jsx)(n.p,{children:"Let statements must be at the module (file) level and can only assign one variable at a time:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let x = 5 in\n  let INVALID = 10\n// SyntaxError: Missing 'in' \u2014 bare 'let' allowed only at top level\n\nlet a = 1, b = 2\n// SyntaxError: Cannot assign multiple identifiers here\n"})}),"\n",(0,a.jsx)(n.h2,{id:"deleting-variables",children:"Deleting Variables"}),"\n",(0,a.jsxs)(n.p,{children:["To remove a variable which was previously declared using a let statement, use the ",(0,a.jsx)(n.code,{children:"del"})," statement:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'let temp = "temporary"\n// ... use temp ...\ndel temp  // Variable is no longer available\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Like let statements, ",(0,a.jsx)(n.code,{children:"del"})," statements can only be used at the module (file) level."]}),"\n",(0,a.jsx)(n.h2,{id:"variable-naming",children:"Variable Naming"}),"\n",(0,a.jsx)(n.p,{children:"The keywords and special symbols listed below cannot be used as variable names or function parameters. The parser will throw an error if you try to use them."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"let"}),", ",(0,a.jsx)(n.code,{children:"in"}),", ",(0,a.jsx)(n.code,{children:"if"}),", ",(0,a.jsx)(n.code,{children:"then"}),", ",(0,a.jsx)(n.code,{children:"else"}),", ",(0,a.jsx)(n.code,{children:"del"}),",",(0,a.jsx)(n.code,{children:"import"}),", ",(0,a.jsx)(n.code,{children:"export"}),", ",(0,a.jsx)(n.code,{children:"from"}),", ",(0,a.jsx)(n.code,{children:"true"}),", ",(0,a.jsx)(n.code,{children:"false"}),", ",(0,a.jsx)(n.code,{children:"$"}),", ",(0,a.jsx)(n.code,{children:"_"})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"basic-variable-usage",children:"Basic Variable Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'import pi from "math"\n// Calculate the volume of a cylinder\nlet radius = 3, height = 10 in\nlet baseArea = pi * radius^2 in\n  baseArea * height    // ~282.74\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"// Convert temperature scales\nlet celsius = 25 in\nlet fahrenheit = celsius * 9/5 + 32 in\nlet kelvin = celsius + 273.15 in\n  [celsius, fahrenheit, kelvin]    // [25, 77, 298.15]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"scoping",children:"Scoping"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'let outer = "outer" in\n  let inner = "inner" in\n    let result = outer + " and " + inner in\n      result    // "outer and inner"\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"let x = 1 in\n  let x = x + 1 in\n    let x = x * 2 in\n      x    // 4\n"})}),"\n",(0,a.jsx)(n.h3,{id:"multiple-bindings",children:"Multiple Bindings"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'import sqrt from "math"\n\nlet point = [3, 4] in\nlet x = point[0], y = point[1] in\n  sqrt(x^2 + y^2)\n// Distance from origin: 5\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:"// Calculate a student's final score\nlet homeworkAvg = 85, testAvg = 92, finalExam = 88 in\nlet homeworkWeight = 0.3, testWeight = 0.4, finalWeight = 0.3 in\n  homeworkAvg * homeworkWeight +\n  testAvg * testWeight +\n  finalExam * finalWeight\n// 88.7\n"})}),"\n",(0,a.jsx)(n.h3,{id:"intermediate-calculations",children:"Intermediate Calculations"}),"\n",(0,a.jsx)(n.p,{children:"Quadratic formula: x = (-b \xb1 \u221a(b\xb2-4ac)) / 2a"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-numfu",children:'import sqrt from "math"\n\nlet a = 1, b = -5, c = 6 in\nlet discriminant = b^2 - 4*a*c in\nlet sqrt_discriminant = sqrt(discriminant) in\nlet x1 = (-b + sqrt_discriminant) / (2*a) in\nlet x2 = (-b - sqrt_discriminant) / (2*a) in\n  [x1, x2]    // [3, 2]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var l=i(6540);const a={},s=l.createContext(a);function r(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);