"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[702],{3215:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"guide/partial-application","title":"Partial Application","description":"Partial application in NumFu lets you call a function with some of its arguments now, producing a new function that remembers those arguments and waits for the rest.","source":"@site/../docs/guide/partial-application.md","sourceDirName":"guide","slug":"/guide/partial-application","permalink":"/docs/guide/partial-application","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/guide/partial-application.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Special Operators","permalink":"/docs/guide/operators"},"next":{"title":"Printing and Assertions","permalink":"/docs/guide/printing"}}');var r=i(4848),l=i(8453);const s={},t="Partial Application",c={},o=[{value:"Currying and Partial Application",id:"currying-and-partial-application",level:2},{value:"Automatic Currying",id:"automatic-currying",level:3},{value:"Progressive Application",id:"progressive-application",level:3},{value:"Too Many Arguments",id:"too-many-arguments",level:3},{value:"The <code>_</code> Placeholder",id:"the-_-placeholder",level:2},{value:"Examples with custom functions",id:"examples-with-custom-functions",level:4},{value:"Examples with built-ins",id:"examples-with-built-ins",level:4},{value:"Operators as Functions",id:"operators-as-functions",level:2},{value:"Examples in Piping",id:"examples-in-piping",level:3},{value:"Rest Parameters and <code>_</code>",id:"rest-parameters-and-_",level:2},{value:"Restrictions",id:"restrictions",level:2},{value:"More Examples",id:"more-examples",level:2},{value:"Rest parameters",id:"rest-parameters",level:4},{value:"Combining with piping",id:"combining-with-piping",level:4}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"partial-application",children:"Partial Application"})}),"\n",(0,r.jsxs)(n.p,{children:["Partial application in NumFu lets you call a function with ",(0,r.jsx)(n.em,{children:"some"})," of its arguments now, producing a new function that remembers those arguments and waits for the rest.\nThis works for both user-defined lambdas and built-in functions, and becomes even more powerful with the ",(0,r.jsxs)(n.strong,{children:["underscore (",(0,r.jsx)(n.code,{children:"_"}),") placeholder"]})," syntax."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"currying-and-partial-application",children:"Currying and Partial Application"}),"\n",(0,r.jsx)(n.h3,{id:"automatic-currying",children:"Automatic Currying"}),"\n",(0,r.jsx)(n.p,{children:"One of NumFu's most powerful features is automatic currying:\nwhen you provide fewer arguments than a function expects, you get back a new function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"let add = {x, y -> x + y} in\nlet add5 = add(5) in   // Partial application\n  add5(3)              // 8\n"})}),"\n",(0,r.jsx)(n.p,{children:"Partially applied functions can also be inspected:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"{x, y -> x + y}(5)\n// {y -> 5 + y}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"progressive-application",children:"Progressive Application"}),"\n",(0,r.jsx)(n.p,{children:"You can apply arguments one at a time:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"let multiply = {x, y, z -> x * y * z} in\nlet double = multiply(2) in      // {y, z -> 2 * y * z}\nlet doubleBy3 = double(3) in     // {z -> 2 * 3 * z}\n  doubleBy3(4)                   // 24\n"})}),"\n",(0,r.jsx)(n.h3,{id:"too-many-arguments",children:"Too Many Arguments"}),"\n",(0,r.jsx)(n.p,{children:"Providing more arguments than parameters is an error:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"let add = {x, y -> x + y} in\n  add(1, 2, 3)\n// TypeError: Cannot apply 1 more arguments to non-callable result\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"the-_-placeholder",children:["The ",(0,r.jsx)(n.code,{children:"_"})," Placeholder"]}),"\n",(0,r.jsxs)(n.p,{children:["While currying applies arguments from left to right, the ",(0,r.jsx)(n.code,{children:"_"})," placeholder lets you ",(0,r.jsx)(n.strong,{children:"skip"})," arguments in any position and fill them in later."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"max(_)([1, 2, 3])     // 3\nmax(_, 2, _)(1, 3)    // 3\nmax(1, _, _)(2)(3)    // 3\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Works in any position (start, middle, end)"}),"\n",(0,r.jsx)(n.li,{children:"Works for both lambdas and built-in functions"}),"\n",(0,r.jsxs)(n.li,{children:["Multiple ",(0,r.jsx)(n.code,{children:"_"})," placeholders allowed"]}),"\n",(0,r.jsx)(n.li,{children:"You can fill multiple placeholders in one later call"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"examples-with-custom-functions",children:"Examples with custom functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"{a, b, c -> a + b + c}(_, 5, _)\n// {a, c -> a + 5 + c}\n\n{a, b, c -> a + b + c}(5, _)\n// {b, c -> 5 + b + c}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"examples-with-built-ins",children:"Examples with built-ins"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import max from "math"\n\nmax(_, _, _)(2, 3)    // partially applied function\nmax(2, _)(3, 4)       // 4\n'})}),"\n",(0,r.jsx)(n.p,{children:"Placeholders remember fixed arguments and validate the rest when filled later."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"operators-as-functions",children:"Operators as Functions"}),"\n",(0,r.jsxs)(n.p,{children:["In NumFu, operators like ",(0,r.jsx)(n.code,{children:"+"}),", ",(0,r.jsx)(n.code,{children:"-"}),", ",(0,r.jsx)(n.code,{children:">"}),", ",(0,r.jsx)(n.code,{children:"=="}),", and many others are internally ",(0,r.jsx)(n.strong,{children:"just regular functions"}),".\nThis means you can use them anywhere you can use a function \u2014 including partial application with ",(0,r.jsx)(n.code,{children:"_"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This is especially useful for writing piping chains and simple helper functions without having to define lambdas explicitly."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"_ + 1\n// is equivalent to:\n{x -> x + 1}\n\n10 > _\n// is equivalent to:\n{x -> 10 > x}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"examples-in-piping",children:"Examples in Piping"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"[1, 2, 3] |> map(_, _ * 2);\n// [2, 4, 6]\n\n[5, 12, 3] |> filter(_, _ > 4) |> map(_, _ * 2)\n// [10, 24]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"rest-parameters-and-_",children:["Rest Parameters and ",(0,r.jsx)(n.code,{children:"_"})]}),"\n",(0,r.jsxs)(n.p,{children:["Rest parameters (",(0,r.jsx)(n.code,{children:"...name"}),") collect all remaining arguments into a list.\nThey combine seamlessly with placeholders:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"{x, ...args -> args}(_, 1, 2)\n// {x -> [1,2,2]}\n\n{x, ...args -> args}(10, _, _, _)\n// {...args -> args}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This also works for built-in functions that accept any number of arguments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"max(2, _)(3, 4)       // 4\nmax(_, _, _)(2, 3)    // partially applied function\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"restrictions",children:"Restrictions"}),"\n",(0,r.jsxs)(n.p,{children:["You ",(0,r.jsx)(n.strong,{children:"cannot"})," use ",(0,r.jsx)(n.code,{children:"_"})," together with the spread (",(0,r.jsx)(n.code,{children:"..."}),") operator when calling a function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'join(["a", "b"], ..._)\n// TypeError: Cannot combine spread operator with argument placeholder\n'})}),"\n",(0,r.jsx)(n.p,{children:"The spread operator requires fully evaluated values, not placeholders."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"more-examples",children:"More Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import join from "std"\n\n// Chain of partials\n{a, b -> a * b}(2)\n// {b -> 2 * b}\n\n// Placeholder in middle, fill rest later\n{a, b, c -> a + b * c}(_, 3)(4)\n// {a -> a + 3 * 4}\n\n{a, b, c -> a+b+c}(_, 5, _)\n// {a,c -> a+5+c}\n\n// With join\njoin(["x", "y"], _)("-")\n// "x-y"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"rest-parameters",children:"Rest parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import min, max from "math"\n\n// Rest parameter with placeholders\n{x, ...args -> args}(_, 1, 2)(5)\n// [1, 2]\n\n{x, ...args -> min(args) + x}(10, _, _, _)(1,2,3)\n// 11\n\n// Builtin function with multiple args in later call\nmax(5, _)(2, 8, 1)  // 8\n'})}),"\n",(0,r.jsx)(n.h4,{id:"combining-with-piping",children:"Combining with piping"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import max from "math"\n\n5 |> max(_, 10)     // 10\n\n// Creating a reusable partial function\nlet divideIt = {x, y -> x / y}(_, 2) in\n10 |> divideIt;     // 5\n\n[5, 12, 3] |> filter(_, _ > 4) |> map(_, _ * 2)\n// [10, 24]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var a=i(6540);const r={},l=a.createContext(r);function s(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);