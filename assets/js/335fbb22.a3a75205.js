"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[423],{6583:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/builtins","title":"Built-ins","description":"NumFu comes with a set of built-in constants and operators that are always available in every program. Most operators are overloaded to work with different types.","source":"@site/../docs/reference/builtins.md","sourceDirName":"reference","slug":"/reference/builtins","permalink":"/docs/reference/builtins","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/reference/builtins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Imports and Exports","permalink":"/docs/guide/modules"},"next":{"title":"The Standard Library","permalink":"/docs/reference/stdlib"}}');var l=r(4848),i=r(8453);const d={},c="Built-ins",o={},a=[{value:"Constants",id:"constants",level:2},{value:"<code>nan</code>",id:"nan",level:3},{value:"<code>inf</code>",id:"inf",level:3},{value:"Functional Operations",id:"functional-operations",level:2},{value:"<code>map(list, function)</code>",id:"maplist-function",level:3},{value:"<code>filter(list, predicate)</code>",id:"filterlist-predicate",level:3},{value:"System Functions",id:"system-functions",level:2},{value:"<code>error(message)</code>, <code>error(message, type)</code>",id:"errormessage-errormessage-type",level:3},{value:"<code>assert(condition)</code>, <code>assert(condition, return)</code>",id:"assertcondition-assertcondition-return",level:3},{value:"<code>exit()</code>",id:"exit",level:3},{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"<code>+</code> (Addition)",id:"-addition",level:3},{value:"<code>-</code> (Subtraction)",id:"--subtraction",level:3},{value:"<code>*</code> (Multiplication)",id:"-multiplication",level:3},{value:"<code>/</code> (Division)",id:"-division",level:3},{value:"<code>%</code> (Modulo)",id:"-modulo",level:3},{value:"<code>^</code> (Exponentiation)",id:"-exponentiation",level:3},{value:"Logical Operators",id:"logical-operators",level:2},{value:"<code>&amp;&amp;</code> (Logical AND)",id:"-logical-and",level:3},{value:"<code>||</code> (Logical OR)",id:"-logical-or",level:3},{value:"<code>!</code> (Logical NOT)",id:"-logical-not",level:3},{value:"<code>xor</code> (Logical XOR)",id:"xor-logical-xor",level:3},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"<code>==</code> (Equality)",id:"-equality",level:3},{value:"<code>!=</code> (Inequality)",id:"-inequality",level:3},{value:"<code>&gt;</code> (Greater Than)",id:"-greater-than",level:3},{value:"<code>&lt;</code> (Less Than)",id:"-less-than",level:3},{value:"<code>&gt;=</code> (Greater Than or Equal)",id:"-greater-than-or-equal",level:3},{value:"<code>&lt;=</code> (Less Than or Equal)",id:"-less-than-or-equal",level:3}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"built-ins",children:"Built-ins"})}),"\n",(0,l.jsx)(n.p,{children:"NumFu comes with a set of built-in constants and operators that are always available in every program. Most operators are overloaded to work with different types."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,l.jsx)(n.p,{children:"Mathematical and special constants available globally."}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"nan",children:(0,l.jsx)(n.code,{children:"nan"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type"}),": ",(0,l.jsx)(n.code,{children:"Number"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description"}),": Not a Number (represents undefined mathematical results)"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"nan                // nan\n0 / 0              // nan\nsqrt(-1)           // nan\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"inf",children:(0,l.jsx)(n.code,{children:"inf"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type"}),": ",(0,l.jsx)(n.code,{children:"Number"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description"}),": Positive infinity"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"inf                 // inf\n1 / 0               // inf\n-1 / 0              // -inf\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"functional-operations",children:"Functional Operations"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"maplist-function",children:(0,l.jsx)(n.code,{children:"map(list, function)"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Parameters"}),": ",(0,l.jsx)(n.code,{children:"List, Lambda"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),": ",(0,l.jsx)(n.code,{children:"List"})," - new list with function applied to each element"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'map([1, 2, 3, 4], {x -> x * x})     // [1, 4, 9, 16]\nmap(["hello", "world"], length)     // [5, 5]\nmap([1, 2, 3], {x -> x + 10})       // [11, 12, 13]\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"filterlist-predicate",children:(0,l.jsx)(n.code,{children:"filter(list, predicate)"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Parameters"}),": ",(0,l.jsx)(n.code,{children:"List, Lambda"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),": ",(0,l.jsx)(n.code,{children:"List"})," - new list with elements that satisfy predicate"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'filter([1, 2, 3, 4, 5], {x -> x % 2 == 0})                    // [2, 4]\nfilter(["apple", "banana", "cherry"], {s -> length(s) > 5})   // ["banana", "cherry"]\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"system-functions",children:"System Functions"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"errormessage-errormessage-type",children:[(0,l.jsx)(n.code,{children:"error(message)"}),", ",(0,l.jsx)(n.code,{children:"error(message, type)"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Parameters"}),": ",(0,l.jsx)(n.code,{children:"String"})," or ",(0,l.jsx)(n.code,{children:"String, String"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),": Never returns (throws error)"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'error("Something went wrong")\nerror("Invalid input", "ValueError")\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"assertcondition-assertcondition-return",children:[(0,l.jsx)(n.code,{children:"assert(condition)"}),", ",(0,l.jsx)(n.code,{children:"assert(condition, return)"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Parameters"}),": ",(0,l.jsx)(n.code,{children:"Boolean"})," or ",(0,l.jsx)(n.code,{children:"Boolean, Any"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),": ",(0,l.jsx)(n.code,{children:"Boolean | Any"})," - true or the return value if condition is true"]}),"\n",(0,l.jsx)(n.p,{children:"Throws assertion error if condition is false."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'assert(2 + 2 == 4)                // Passes\nassert(2 + 2 == 5, "Math error")  // Fails with message\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"exit",children:(0,l.jsx)(n.code,{children:"exit()"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Parameters"}),": None"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Returns"}),": Never returns (exits program)"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-addition",children:[(0,l.jsx)(n.code,{children:"+"})," (Addition)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number + Number \u2192 Number"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"String + String \u2192 String"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"List + List \u2192 List"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'5 + 3                      // 8\n"Hello" + " " + "World";   // "Hello World"\n[1, 2] + [3, 4]            // [1, 2, 3, 4]\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"--subtraction",children:[(0,l.jsx)(n.code,{children:"-"})," (Subtraction)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Number \u2192 Number"})," (unary negation)"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number - Number \u2192 Number"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"-5                  // -5\n10 - 3              // 7\n5 - 8               // -3\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-multiplication",children:[(0,l.jsx)(n.code,{children:"*"})," (Multiplication)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number * Number \u2192 Number"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"String * Number \u2192 String"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"List * Number \u2192 List"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Commutative"}),": String/List multiplication works in both orders."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'5 * 3               // 15\n"Ha" * 3            // "HaHaHa"\n3 * "Ho";           // "HoHoHo"\n[1, 2] * 3          // [1, 2, 1, 2, 1, 2]\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-division",children:[(0,l.jsx)(n.code,{children:"/"})," (Division)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number / Number \u2192 Number"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Special cases"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Division by zero returns ",(0,l.jsx)(n.code,{children:"inf"})," or ",(0,l.jsx)(n.code,{children:"-inf"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"0 / 0"})," returns ",(0,l.jsx)(n.code,{children:"nan"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"10 / 2              // 5\n1 / 0               // inf\n-1 / 0              // -inf\n0 / 0               // nan\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-modulo",children:[(0,l.jsx)(n.code,{children:"%"})," (Modulo)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number % Number \u2192 Number"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"10 % 3              // 1\n7 % 2               // 1\n8 % 4               // 0\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-exponentiation",children:[(0,l.jsx)(n.code,{children:"^"})," (Exponentiation)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number ^ Number \u2192 Number"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"2 ^ 8               // 256\n3 ^ 2               // 9\n4 ^ 0.5             // 2 (square root)\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-logical-and",children:[(0,l.jsx)(n.code,{children:"&&"})," (Logical AND)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Any && Any \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Short-circuiting"}),": If first operand is falsy, second is not evaluated."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'true && false             // false\ntrue && true              // true\nfalse && sqrt("error")    // false (doesn\'t evaluate sqrt)\n5 && 0                    // false\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-logical-or",children:[(0,l.jsx)(n.code,{children:"||"})," (Logical OR)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Any || Any \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Short-circuiting"}),": If first operand is truthy, second is not evaluated."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'true || false             // true\nfalse || false            // false\ntrue || sqrt("error")     // true (doesn\'t evaluate sqrt)\n0 || 5                    // true\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-logical-not",children:[(0,l.jsx)(n.code,{children:"!"})," (Logical NOT)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"!Any \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'!true               // false\n!false              // true\n!0                  // true\n!5                  // false\n!""                 // true\n!"hello"            // false\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"xor-logical-xor",children:[(0,l.jsx)(n.code,{children:"xor"})," (Logical XOR)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"xor(Any, Any) \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:"xor(true, false)    // true\nxor(true, true)     // false\nxor(false, false)   // false\nxor(1, 0)           // true\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-equality",children:[(0,l.jsx)(n.code,{children:"=="})," (Equality)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Any == Any \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'5 == 5              // true\n"hello" == "hello"; // true\n[1, 2] == [1, 2]    // true\n5 == "5"            // false\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-inequality",children:[(0,l.jsx)(n.code,{children:"!="})," (Inequality)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Any != Any \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-numfu",children:'5 != 3              // true\n"a" != "b";         // true\n[1, 2] != [2, 1]    // true\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-greater-than",children:[(0,l.jsx)(n.code,{children:">"})," (Greater Than)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number > Number \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-less-than",children:[(0,l.jsx)(n.code,{children:"<"})," (Less Than)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number < Number \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-greater-than-or-equal",children:[(0,l.jsx)(n.code,{children:">="})," (Greater Than or Equal)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number >= Number \u2192 Boolean"})}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"-less-than-or-equal",children:[(0,l.jsx)(n.code,{children:"<="})," (Less Than or Equal)"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Overloads"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Number <= Number \u2192 Boolean"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(t,{...e})}):t(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>c});var s=r(6540);const l={},i=s.createContext(l);function d(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);