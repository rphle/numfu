"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[196],{6527:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"reference/cli","title":"CLI","description":"NumFu provides a command-line interface for running programs, interactive development, and debugging. This reference covers all available commands and options.","source":"@site/../docs/reference/cli.md","sourceDirName":"reference","slug":"/reference/cli","permalink":"/docs/reference/cli","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/reference/cli.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"The Standard Library","permalink":"/docs/reference/stdlib"}}');var i=r(4848),l=r(8453);const d={},c="CLI",t={},a=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Running Programs",id:"running-programs",level:3},{value:"Commands",id:"commands",level:2},{value:"<code>numfu &lt;file&gt;</code> (Default Command)",id:"numfu-file-default-command",level:3},{value:"<code>numfu parse</code>",id:"numfu-parse",level:3},{value:"<code>numfu repl</code>",id:"numfu-repl",level:3},{value:"<code>numfu repl ast</code>",id:"numfu-repl-ast",level:3},{value:"Global Options",id:"global-options",level:2},{value:"<code>--version</code>",id:"--version",level:3},{value:"<code>--help</code>",id:"--help",level:3},{value:"File Handling",id:"file-handling",level:2},{value:"File Extensions",id:"file-extensions",level:3},{value:"Error Handling",id:"error-handling",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cli",children:"CLI"})}),"\n",(0,i.jsx)(n.p,{children:"NumFu provides a command-line interface for running programs, interactive development, and debugging. This reference covers all available commands and options."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.h3,{id:"running-programs",children:"Running Programs"}),"\n",(0,i.jsx)(n.p,{children:"The most common use case is running NumFu source files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"numfu myprogram.nfu\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This executes the NumFu program in ",(0,i.jsx)(n.code,{children:"myprogram.nfu"})," and displays the results."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,i.jsxs)(n.h3,{id:"numfu-file-default-command",children:[(0,i.jsx)(n.code,{children:"numfu <file>"})," (Default Command)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": Parse and run a NumFu source file"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": ",(0,i.jsx)(n.code,{children:"numfu [OPTIONS] SOURCE"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SOURCE"}),": Path to the NumFu source file (",(0,i.jsx)(n.code,{children:".nfu"})," extension recommended, parsed binary ",(0,i.jsx)(n.code,{children:".nfut"})," files can also be run)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Options"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-p, --precision INTEGER"}),": Floating point precision for calculations (default: 15)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-r, --rec-depth INTEGER"}),": Maximum recursion depth during evaluation (default: 10000)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--iter-depth INTEGER"}),": Maximum iteration depth for tail-call optimization (default: infinite)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run a program with default settings\nnumfu fibonacci.nfu\n\n# Run with higher precision for mathematical computing\nnumfu -p 100 scientific_calculation.nfu\n\n# Run with custom recursion limit\nnumfu -r 5000 recursive_algorithm.nfu\n\n# Combine options\nnumfu -p 30 -r 15000 complex_program.nfu\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"numfu-parse",children:(0,i.jsx)(n.code,{children:"numfu parse"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": Parse and serialize input file or display its Abstract Syntax Tree"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": ",(0,i.jsx)(n.code,{children:"numfu parse [OPTIONS] SOURCE"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SOURCE"}),": Path to the NumFu source file to parse"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Options"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-p"}),": Pretty print the Abstract Syntax Tree (AST)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-o, --output PATH"}),': File name for the serialized source file (default: "SOURCE.nfut")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-m, --max-depth INTEGER"}),": Maximum AST depth to display (default: 10)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-n, --indent INTEGER"}),": Indentation size for pretty printing (default: 2)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Parse file and save to binary myprogram.nfut\nnumfu parse myprogram.nfu\n\n# Save to custom file name\nnumfu parse -o source.nfut myprogram.nfu\n\n# Customize display formatting\nnumfu parse -p -m 15 -n 4 myprogram.nfu\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"AST Output Format"}),":\nThe AST is displayed as a hierarchical tree structure showing the parsed program structure:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[\n  Call(\n    func=Variable(name='println'),\n    args=[\"Hello, World!\"]\n  )\n]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"numfu-repl",children:(0,i.jsx)(n.code,{children:"numfu repl"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": Start an interactive Read-Eval-Print Loop\n",(0,i.jsx)(n.strong,{children:"Usage"}),": ",(0,i.jsx)(n.code,{children:"numfu repl [OPTIONS]"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Options"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-p, --precision INTEGER"}),": Floating point precision (default: 15)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-r, --rec-depth INTEGER"}),": Maximum recursion depth (default: 10000)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--iter-depth INTEGER"}),": Maximum iteration depth for tail-call optimization (default: infinite)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start REPL with default settings\nnumfu repl\n\n# Start with higher precision\nnumfu repl -p 50\n\n# Start with custom recursion limit\nnumfu repl -r 5000\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"REPL Features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Interactive expression evaluation"}),"\n",(0,i.jsxs)(n.li,{children:["Persistent history (saved to ",(0,i.jsx)(n.code,{children:"~/.numfu_history"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Multi-line input support (use ",(0,i.jsx)(n.code,{children:"\\"})," at end of line)"]}),"\n",(0,i.jsx)(n.li,{children:"Rich output formatting"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"REPL Usage"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"NumFu REPL. Type 'exit' or press Ctrl+D to exit.\n>>> 2 + 3 * 4\n14\n>>> let square = {x -> x * x} in \\\n... square(7)\n49\n>>> exit\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"numfu-repl-ast",children:(0,i.jsx)(n.code,{children:"numfu repl ast"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Description"}),": Start interactive AST exploration REPL \u2014 essentially interactive ",(0,i.jsx)(n.code,{children:"numfu parse -p"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": ",(0,i.jsx)(n.code,{children:"numfu repl ast [OPTIONS]"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Options"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-m, --max-depth INTEGER"}),": Maximum AST depth to display (default: 10)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"-n, --indent INTEGER"}),": Indentation size (default: 2)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start AST REPL with default settings\nnumfu repl ast\n\n# Customize AST display\nnumfu repl ast -m 15 -n 4\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"AST REPL Usage"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"NumFu AST REPL. Type 'exit' or press Ctrl+D to exit.\n>>> 2 + 3\n[Import(name='builtins'), Call(func=Variable(name='+'), args=[2, 3])]\n>>> {x -> x * x}\n[\n  Lambda(\n    arg_names=['x'],\n    body=Call(\n      func=Variable(name='*'),\n      args=[\n        Variable(name='x'),\n        Variable(name='x')\n      ]\n    )\n  )\n]\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"global-options",children:"Global Options"}),"\n",(0,i.jsx)(n.h3,{id:"--version",children:(0,i.jsx)(n.code,{children:"--version"})}),"\n",(0,i.jsx)(n.p,{children:"Display NumFu version information."}),"\n",(0,i.jsx)(n.h3,{id:"--help",children:(0,i.jsx)(n.code,{children:"--help"})}),"\n",(0,i.jsx)(n.p,{children:"Display help information for commands."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"file-handling",children:"File Handling"}),"\n",(0,i.jsx)(n.h3,{id:"file-extensions",children:"File Extensions"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:".nfu"})," extension should be used for standard NumFu source files and is supported by the module resolver."]}),"\n",(0,i.jsxs)(n.p,{children:["The interpreter also recognizes binary, pre-parsed NumFu files, usually with the extension ",(0,i.jsx)(n.code,{children:".nfut"}),", which are generated by the ",(0,i.jsx)(n.code,{children:"numfu parse"})," command. However, they cannot be imported as modules (though support is planned for future releases)."]}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"NumFu provides detailed error messages with file context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ numfu broken_program.nfu\n[at broken_program.nfu:5:15]\n[5]   let l = [1,2,3 in f(...l)\n                    ^\nSyntaxError: Expected one of ',', ']'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>c});var s=r(6540);const i={},l=s.createContext(i);function d(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);