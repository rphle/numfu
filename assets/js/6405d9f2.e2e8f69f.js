"use strict";(self.webpackChunknumfu_docs=self.webpackChunknumfu_docs||[]).push([[929],{4973:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"guide/booleans","title":"Booleans and Logic","description":"NumFu\'s boolean system handles true/false values and logical operations with some unique features like chained comparisons and truthiness rules.","source":"@site/../docs/guide/booleans.md","sourceDirName":"guide","slug":"/guide/booleans","permalink":"/docs/guide/booleans","draft":false,"unlisted":false,"editUrl":"https://github.com/rphle/numfu/tree/main/docs/../docs/guide/booleans.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Numbers and Arithmetic","permalink":"/docs/guide/arithmetic"},"next":{"title":"Variables and Let Expressions","permalink":"/docs/guide/variables"}}');var r=s(4848),i=s(8453);const a={},t="Booleans and Logic",o={},c=[{value:"Boolean Literals",id:"boolean-literals",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Basic Comparisons",id:"basic-comparisons",level:3},{value:"Chained Comparisons",id:"chained-comparisons",level:3},{value:"Logical Operators",id:"logical-operators",level:2},{value:"AND Operator (<code>&amp;&amp;</code>)",id:"and-operator-",level:3},{value:"OR Operator (<code>||</code>)",id:"or-operator-",level:3},{value:"NOT Operator (<code>!</code>)",id:"not-operator-",level:3},{value:"XOR Function",id:"xor-function",level:3},{value:"Short-Circuit Evaluation",id:"short-circuit-evaluation",level:2},{value:"Truthiness",id:"truthiness",level:2},{value:"Truthy Values",id:"truthy-values",level:3},{value:"Falsy Values",id:"falsy-values",level:3},{value:"If-Then-Else Statements",id:"if-then-else-statements",level:2},{value:"Nested If-Then-Else",id:"nested-if-then-else",level:3},{value:"If-Then-Else as an Expression",id:"if-then-else-as-an-expression",level:3},{value:"Examples",id:"examples",level:2},{value:"Range Checking",id:"range-checking",level:3},{value:"Complex Conditions",id:"complex-conditions",level:3},{value:"Guard Clauses",id:"guard-clauses",level:3},{value:"Conditional Assignment",id:"conditional-assignment",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"booleans-and-logic",children:"Booleans and Logic"})}),"\n",(0,r.jsx)(n.p,{children:"NumFu's boolean system handles true/false values and logical operations with some unique features like chained comparisons and truthiness rules."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"boolean-literals",children:"Boolean Literals"}),"\n",(0,r.jsx)(n.p,{children:"NumFu has two boolean values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"true\nfalse\n"})}),"\n",(0,r.jsx)(n.p,{children:"These are the foundation of all logical operations and conditional logic in NumFu."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,r.jsx)(n.h3,{id:"basic-comparisons",children:"Basic Comparisons"}),"\n",(0,r.jsx)(n.p,{children:"Compare values to get boolean results:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"5 == 5       // Equality: true\n5 != 3       // Inequality: true\n7 > 3        // Greater than: true\n2 < 5        // Less than: true\n5 >= 5       // Greater or equal: true\n3 <= 7       // Less or equal: true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"chained-comparisons",children:"Chained Comparisons"}),"\n",(0,r.jsx)(n.p,{children:"NumFu supports mathematical-style chained comparisons:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"1 < 2 < 3            // true (1 < 2 AND 2 < 3)\n5 > 3 > 1            // true (5 > 3 AND 3 > 1)\n1 < 2 > 3            // false (1 < 2 is true, but 2 > 3 is false)\n\n// Equivalent to:\n1 < 2 && 2 < 3       // true\n5 > 3 && 3 > 1       // true\n1 < 2 && 2 > 3       // false\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,r.jsxs)(n.h3,{id:"and-operator-",children:["AND Operator (",(0,r.jsx)(n.code,{children:"&&"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Both conditions must be true:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"true && true         // true\ntrue && false        // false\nfalse && true        // false\nfalse && false       // false\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"or-operator-",children:["OR Operator (",(0,r.jsx)(n.code,{children:"||"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"At least one condition must be true:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"true || true         // true\ntrue || false        // true\nfalse || true        // true\nfalse || false       // false\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"not-operator-",children:["NOT Operator (",(0,r.jsx)(n.code,{children:"!"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Inverts the boolean value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"!true               // false\n!false              // true\n!!true              // true (double negation)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"xor-function",children:"XOR Function"}),"\n",(0,r.jsx)(n.p,{children:"Exclusive OR - exactly one must be true:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"xor(true, false)     // true\nxor(false, true)     // true\nxor(true, true)      // false\nxor(false, false)    // false\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"short-circuit-evaluation",children:"Short-Circuit Evaluation"}),"\n",(0,r.jsx)(n.p,{children:"NumFu uses short-circuit evaluation for efficiency and safety. If the first operand is false, the second isn't evaluated:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'// AND\nfalse && println("This won\'t print")  // false, no side effect\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'// OR\ntrue || println("This won\'t print, too")   // true, no side effect\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"truthiness",children:"Truthiness"}),"\n",(0,r.jsx)(n.p,{children:'NumFu values have "truthiness" when used in boolean contexts:'}),"\n",(0,r.jsx)(n.h3,{id:"truthy-values",children:"Truthy Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"true"})}),"\n",(0,r.jsx)(n.li,{children:"Non-zero numbers"}),"\n",(0,r.jsx)(n.li,{children:"Non-empty strings"}),"\n",(0,r.jsx)(n.li,{children:"Non-empty lists"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"falsy-values",children:"Falsy Values"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"false"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"})," (zero)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'""'})," (empty string)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[]"})," (empty list)"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'!0             // true\n!42            // false\n!""            // true\n!"hello"       // false\n![]            // true\n![1, 2]        // false\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"if-then-else-statements",children:"If-Then-Else Statements"}),"\n",(0,r.jsxs)(n.p,{children:["Conditional logic in NumFu is handled using ",(0,r.jsx)(n.code,{children:"if-then-else"})," statements. These statements allow you to evaluate different blocks of code based on whether a condition evaluates to ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"if condition then\n  // Code to evaluate if condition is true\nelse\n  // Code to evaluate if condition is false\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let x = 10 in\nif x > 5 then\n  println("x is greater than 5")\nelse\n  println("x is 5 or less")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nested-if-then-else",children:"Nested If-Then-Else"}),"\n",(0,r.jsxs)(n.p,{children:["You can nest ",(0,r.jsx)(n.code,{children:"if-then-else"})," statements to handle more complex conditions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import println from "io"\n\nlet score = 85 in\nif score >= 90 then\n  println("Grade: A")\nelse if score >= 80 then\n  println("Grade: B")\nelse if score >= 70 then\n  println("Grade: C")\nelse if score >= 60 then\n  println("Grade: D")\nelse\n  println("Grade: F")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"if-then-else-as-an-expression",children:"If-Then-Else as an Expression"}),"\n",(0,r.jsxs)(n.p,{children:["In NumFu, ",(0,r.jsx)(n.code,{children:"if-then-else"})," can also be used as an expression that returns a value:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let x = 10 in\nlet result = if x > 5 then "greater than 5" else "5 or less" in\nprintln(result)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"range-checking",children:"Range Checking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"let age = 25 in\n  age >= 18 && age < 65  // true (working age)\n\nlet score = 85 in\n  score >= 0 && score <= 100  // true (valid score)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"complex-conditions",children:"Complex Conditions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:"let temperature = 22 in\nlet humidity = 45 in\nlet isComfortable =\n  temperature >= 20 && temperature <= 25 &&\n  humidity >= 30 && humidity <= 60 in\n  isComfortable  // true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"guard-clauses",children:"Guard Clauses"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'import format from "std"\n\nlet processAge = {age ->\n  if age < 0 then error("Age cannot be negative")\n  else if age > 150 then error("Hmmm, your age seems unrealistic")\n  else format("Age {} is valid", age)\n} in processAge(25)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-assignment",children:"Conditional Assignment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-numfu",children:'let status = {score ->\n  if score >= 90 then "excellent"\n  else if score >= 70 then "good"\n  else if score >= 50 then "pass"\n  else "fail"\n} in status(85)  // "good"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var l=s(6540);const r={},i=l.createContext(r);function a(e){const n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);