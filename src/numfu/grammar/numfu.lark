start: (expr ";"?)*
?expr: import_stmt | export_stmt | del_stmt | assertion_expr

import_stmt: IMPORT (STRING | (NAME ("," NAME)* | IMPORT_ALL) FROM STRING)
export_stmt: EXPORT ((NAME ("," NAME)*) | (NAME ASSIGN expr))
del_stmt: DEL NAME

?assertion_expr: pipe_expr assertion?
?assertion: ("--->" expr)

?pipe_expr: compose_expr | pipe_expr (PIPE compose_expr) -> pipe_chain
?compose_expr: logic_or | compose_expr (COMPOSE logic_or) -> compose_chain

?logic_or: logic_and | logic_or OR logic_and -> bin_op
?logic_and: comp | logic_and AND comp -> bin_op

?comp: arith ( (EQ | NE | LT | GT | LE | GE) arith )*
?arith: term | arith (ADD | SUB) term -> bin_op
?term: factor | term (MUL | DIV | MOD) factor -> bin_op
?factor: power | ADD factor -> pos | SUB factor -> neg | NOT factor -> not_op
?power: index | index POW power -> bin_op

?index: call | index "[" expr "]" -> index_op
?call: atom | call call_args
call_args: "(" [list_element ("," list_element)*] ")"

?atom: BOOLEAN       -> boolean
     | NUMBER        -> number
     | STRING        -> string
     | NAME          -> variable
     | "(" expr ")"
     | lambda_def
     | conditional
     | let_binding
     | list_literal

list_literal: "[" [list_element ("," list_element)*] "]"
list_element: SPREAD expr -> spread_op | expr
lambda_def: "{" lambda_params "->" expr "}"
lambda_params: (NAME ("," NAME)* ("," rest_param)?)? | rest_param
rest_param: "..." NAME
conditional: IF expr THEN expr ELSE expr
let_binding: LET let_params (IN expr)?
let_params: NAME ASSIGN expr ("," NAME ASSIGN expr)*

IF.2: "if"
THEN.2: "then"
ELSE.2: "else"
IN.2: "in"
LET.2: "let"
DEL.2: "del"
IMPORT.2: "import"
FROM.2: "from"
EXPORT.2: "export"

ADD: "+"
SUB: "-"
MUL: "*"
DIV: "/"
MOD: "%"
POW: "^"
EQ: "=="
NE: "!="
NOT: "!"
LT: "<"
GT: ">"
LE: "<="
GE: ">="
AND: "&&"
OR: "||"
PIPE: "|>"
COMPOSE: ">>"
SPREAD: "..."
IMPORT_ALL: "*"
ASSIGN: "="

BOOLEAN.2: "true" | "false"
NUMBER: /((0|[1-9][\d_]*)(\.[\d_]+)?|\.[\d_]+)([eE][+-]?[\d_]+)?/
NAME.1: /([a-zA-Z_][a-zA-Z0-9_]*\.)?([a-zA-Z_][a-zA-Z0-9_]*)|\$/

%import common.ESCAPED_STRING -> STRING
%import common.WS
%ignore WS
%ignore /\/\/[^\n]*/
%ignore /\/\*(.|\n)*?\*\//
